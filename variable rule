{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a1c9ffb-a414-49f7-a517-d7d332a0fede",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3247533736.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[1], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    name@ = \"Ananya Singh\"\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "name@ = \"Ananya Singh\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17d01e76-21a4-4e5c-9e44-f638d6727bbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "name_ = \"Ananya Singh\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c17d9dcf-68e4-436d-8632-c9a7b82dcb38",
   "metadata": {},
   "outputs": [],
   "source": [
    "_ = \"Ananya Singh\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1f495247-1e26-4bff-b2b0-29110d5dba9a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (834670553.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[2], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    break = \"Ananya Singh\"\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "break = \"Ananya Singh\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "516217ae-e592-4f13-a517-a14a3f168ef2",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to literal here. Maybe you meant '==' instead of '='? (3823539860.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[3], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    18 = \"Ananya Singh\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to literal here. Maybe you meant '==' instead of '='?\n"
     ]
    }
   ],
   "source": [
    "18 = \"Ananya Singh\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d410a4fb-b333-421d-86cf-fe4f93d33ebe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "18 == \"Prachi Jadhav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3d395d76-41df-49cb-8a9e-a01d0ad6067d",
   "metadata": {},
   "outputs": [],
   "source": [
    "Roll_no_18 = \"Prachi Jadhav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4272eeb7-9713-4bb1-98e2-17cbedb930d8",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to True (3192280928.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[6], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    True = \"Prachi Jadhav\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to True\n"
     ]
    }
   ],
   "source": [
    "True = \"Prachi Jadhav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cc7cfbba-8b32-4633-a786-313f54ec249c",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3677675030.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[7], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    na me = \"Prachi Jadhav\"\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "na me = \"Prachi Jadhav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "290d80f2-6b9d-46fe-b3f9-d49c270fb2c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "age = 30 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8efd84a8-a1d6-4038-901b-05e88936bead",
   "metadata": {},
   "outputs": [],
   "source": [
    "Age = 35 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "97607215-802e-42b5-bcde-45c95e7382e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "age "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "501f545b-6b6e-48d7-8682-9abddba7faa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Age "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "abf3840e-a0d1-4d54-82d0-842f3bd6eeec",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (546196258.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[17], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    23name = \"Prachi Jadhav\"\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "23name = \"Prachi Jadhav\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "88b98a7e-d53d-4ffa-8457-b77bea8eb7f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "name23 = \"Ananya Singh\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bb0a3a06-7203-44e2-a8f1-a2df2617bc1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b = 23, 67 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3dbcd579-3e86-4158-97d0-7a871fe5179f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "677b199f-9d5c-4296-b3f9-66302c15027b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "db4c7f53-7b04-47a5-9f52-dd8b544286ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Library function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "24590dd0-5e75-4c0e-8005-fe2f1f40bb99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function print(*args, sep=' ', end='\\n', file=None, flush=False)>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "668a22b0-68a2-46cc-ab87-9812ad6895b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bhimraj Lad\n"
     ]
    }
   ],
   "source": [
    "# Library function or in-built function \n",
    "print(\"Bhimraj Lad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1255b3e3-4306-4548-a972-4fbed311de1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n",
      "a\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "print(\"a\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "917c4d2a-d855-4dbf-8277-4c70a39290a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 67\n"
     ]
    }
   ],
   "source": [
    "print(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c862ef79-64b6-4192-ba63-0c18cef6e044",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23,67,45\n"
     ]
    }
   ],
   "source": [
    "# o/p--> 23,67,45\n",
    "print(23, 67, 45, sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c92fff63-6d58-4454-82d4-04378ef2157c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23,67,45\n"
     ]
    }
   ],
   "source": [
    "# o/p--> 23,67,45\n",
    "print(23,67,45, sep=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "11869b7c-ed45-4831-9025-f996ed0c2d76",
   "metadata": {},
   "outputs": [],
   "source": [
    "name = \"Bhimraj Lad\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "70a77d48-6ca9-429d-9e50-3af780fb3722",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "344a6d25-e57a-4357-9ffa-165f1f38729a",
   "metadata": {},
   "outputs": [],
   "source": [
    "name3 = \"\"\"Bhimraj Lad\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "312b828d-e53f-47c3-bc46-50f2f2d78438",
   "metadata": {},
   "outputs": [],
   "source": [
    "# single quote in string is allowed.\n",
    "# double quote in string is allowed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "bce9da45-ac01-4cda-9086-4d8efce7f98e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ananya Singh\n",
      "Bhimraj Lad\n"
     ]
    }
   ],
   "source": [
    "print(\"Ananya Singh\")\n",
    "print(\"Bhimraj Lad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "3c7c89db-e82d-4a23-87a8-c44b688e060e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ananya Singh\tAnanya Singh\tBhimraj Lad\n"
     ]
    }
   ],
   "source": [
    "print(\"Ananya Singh\", end='\\t')\n",
    "print(\"Ananya Singh\", end='\\t')\n",
    "print(\"Bhimraj Lad\")\n",
    "print(\"BHimraj Lad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4477672b-2a7c-4080-ab58-e41624a34e93",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
